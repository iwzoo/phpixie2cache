<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-19 at 16:49:50.
 */
class Cache_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Cache
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->db_file = tempnam(sys_get_temp_dir(), 'test.sqlite');
		$this->conf_file = tempnam(sys_get_temp_dir(), 'test.conf');
		file_put_contents($this->db_file, '');
		$db = new PDO('sqlite:'.$this->db_file);
		$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		$pixie = $this->getMock('\PHPixie\Pixie',array('find_file'));
		$pixie->expects($this->any())
                 ->method('find_file')
                 ->will($this->returnValue($this->conf_file));
		$pixie->db = new \PHPixie\DB($pixie);
		$pixie->config->set('db.default.connection', 'sqlite:'.$this->db_file);
		$pixie->config->set('db.default.driver', 'pdo');
		$pixie-> config->set('cache.default.driver', 'database');
		$pixie->config->set('cache.default.connection', 'default');
        $this->object = new \PHPixie\Cache($pixie, 'default');
		$db = null;
		
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers PHPixie\Cache::instance
     * @todo   Implement testInstance().
     */
    public function testInstance()
    {
		$this->object->instance()->test = 'same';
		$this->assertEquals('same', $this->object->instance()->test);
		$this->assertEquals('PHPixie\Cache\Database', get_class($this->object->instance()));
    }

	public function testSetGet(){
		$this->object->set('test', 'a', 1);
		$this->assertEquals('a', $this->object->get("test"));
	}
	public function testLifetime(){
		$this->object->set('test', 'a', 1);
		sleep(2);
		$this->assertEquals('3', $this->object->get("test",3));
	}
	public function testDelete(){
		$this->object->set('test', 'a');
		$this->object->delete('test');
		$this->assertEquals('3', $this->object->get("test",3));
	}
	
	public function testClear(){
		$this->object->set('test', 'a');
		$this->object->clear();
		$this->assertEquals('3', $this->object->get("test",3));
	}	
	
    public function testGarbage_collect()
    {
        $this->object->garbage_collect();
    }
}
